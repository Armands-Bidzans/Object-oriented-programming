#ifndef ORGANIZER_H
#define ORGANIZER_H

#include <iostream>
#include <fstream>
#include <string>

using namespace std;

static const string TASKS_FILE = "tasks.txt";
static const int MAX_TASKS = 100;

// –¶–≤–µ—Ç–∞ ANSI
#define DARKGREEN "[2;32m"    // —Ç—ë–º–Ω–æ-–∑–µ–ª—ë–Ω—ã–π
#define GREEN     "\033[92m"    // —è—Ä–∫–æ-–∑–µ–ª—ë–Ω—ã–π (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
#define RED       "\033[31m"
#define YELLOW    "\033[33m"
#define GRAY      "\033[90m"
#define RESET     "\033[0m"

struct Task {
    int id;
    string desc;
    string dueDate;     // —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
    int priority;       // –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∑–∞–¥–∞—á–∏ (1 ‚Äî –Ω–∏–∑–∫–∏–π, 2 ‚Äî —Å—Ä–µ–¥–Ω–∏–π, 3 ‚Äî –≤—ã—Å–æ–∫–∏–π)
};

class Organizer {
private:
    Task tasks[MAX_TASKS];
    int count;

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞
    void load() {
        count = 0;
        ifstream fin(TASKS_FILE);  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è
        if (!fin) return;
        while (count < MAX_TASKS && fin >> tasks[count].id) {
            fin.ignore();  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—à–Ω–∏–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, \n)
            getline(fin, tasks[count].desc, '|');
            getline(fin, tasks[count].dueDate, '|');  // –ß–∏—Ç–∞–µ–º –¥–∞—Ç—É –¥–æ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–∞ '|'
            fin >> tasks[count].priority;  // –ß–∏—Ç–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            fin.ignore();  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ª–∏—à–Ω–∏–π —Å–∏–º–≤–æ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, \n)
            count++;
        }
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª
    void save() {
        ofstream fout(TASKS_FILE);
        if (!fout) {
            cout << RED << "–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏" << RESET << '\n';
            return;
        }
        for (int i = 0; i < count; i++) {
            fout << tasks[i].id << ":" << tasks[i].desc << "|" << tasks[i].dueDate << "|" << tasks[i].priority << "\n";
        }
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π ID
    int nextId() {
        int maxId = 0;
        for (int i = 0; i < count; i++) {
            if (tasks[i].id > maxId) maxId = tasks[i].id;
        }
        return maxId + 1;
    }

public:
    Organizer() {
        load();
    }

    void addTask(const string& desc, const string& dueDate, int priority) {
        if (count >= MAX_TASKS) {
            cout << RED << "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á" << RESET << '\n';
            return;
        }
        Task t;
        t.id = nextId();
        t.desc = desc;
        t.dueDate = dueDate;
        t.priority = priority;
        tasks[count++] = t;
        save();
        cout << GREEN << "–î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ [" << t.id << "]" << RESET << '\n';
    }

    void deleteTask(int id) {
        int pos = -1;
        for (int i = 0; i < count; i++) {
            if (tasks[i].id == id) { pos = i; break; }
        }
        if (pos == -1) {
            cout << RED << "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" << RESET << '\n';
            return;
        }
        for (int i = pos; i + 1 < count; i++) {
            tasks[i] = tasks[i + 1];
        }
        count--;
        save();
        cout << RED << "–£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ [" << id << "]" << RESET << '\n';
    }

    void editTask(int id, const string& newDesc, const string& newDueDate, int newPriority) {
        int pos = -1;
        for (int i = 0; i < count; i++) {
            if (tasks[i].id == id) { pos = i; break; }
        }
        if (pos == -1) {
            cout << YELLOW << "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" << RESET << '\n';
            return;
        }
        tasks[pos].desc = newDesc;
        tasks[pos].dueDate = newDueDate;
        tasks[pos].priority = newPriority;
        save();
        cout << YELLOW << "–ò–∑–º–µ–Ω–µ–Ω–∞ –∑–∞–¥–∞—á–∞ [" << id << "]" << RESET << '\n';
    }

    void listTasks() {
        if (count == 0) {
            cout << "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç" << '\n';
            return;
        }
        cout << "–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:" << '\n';
        for (int i = 0; i < count; i++) {
            cout << "[" << tasks[i].id << "] " << tasks[i].desc;
            cout << " (—Å—Ä–æ–∫: " << tasks[i].dueDate;
            cout << ", –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: " << tasks[i].priority << ")" << '\n';
        }
    }

    void run() {
        while (true) {
            cout << "\n–û—Ä–≥–∞–Ω–∞–π–∑–µ—Ä:\n";
            cout << DARKGREEN << "1 - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏\n" << RESET;
            cout << GREEN << "2 - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\n" << RESET;
            cout << YELLOW << "3 - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É\n" << RESET;
            cout << RED << "4 - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É\n" << RESET;
            cout << GRAY << "5 - –ù–∞–∑–∞–¥\n" << RESET;
            cout << "–í—ã–±–æ—Ä: ";

            string choice;
            getline(cin, choice);

            if (choice == "1") {
                listTasks();
            }
            else if (choice == "2") {
                cout << "–û–ø–∏—Å–∞–Ω–∏–µ: ";
                string desc;
                getline(cin, desc);

                cout << "–°—Ä–æ–∫ (YYYY-MM-DD): ";
                string dueDate;
                getline(cin, dueDate);

                cout << "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-3): ";
                string pstr;
                getline(cin, pstr);

                int prLen = 0;
                while (pstr[prLen] != '\0') prLen++;

                int priority = 2;
                if (prLen > 0 && pstr[0] >= '1' && pstr[0] <= '3') {
                    priority = pstr[0] - '0';
                }

                addTask(desc, dueDate, priority);
            }
            else if (choice == "3") {
                cout << "ID –∑–∞–¥–∞—á–∏: ";
                string s;
                getline(cin, s);

                int id = 0;
                for (int i = 0; s[i] != '\0'; i++) {
                    if (s[i] >= '0' && s[i] <= '9') {
                        id = id * 10 + (s[i] - '0');
                    }
                } //  –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª ‚Äî —Ü–∏—Ñ—Ä–∞, –ø—Ä–∏–±–∞–≤–ª—è–µ—Ç –µ—ë –∫ —á–∏—Å–ª—É id.

                cout << "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ";
                string newDesc;
                getline(cin, newDesc);

                cout << "–ù–æ–≤–∞—è –¥–∞—Ç–∞: ";
                string newDueDate;
                getline(cin, newDueDate);

                cout << "–ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (1-3): ";
                string prStr;
                getline(cin, prStr);

                int len = 0;
                while (prStr[len] != '\0') len++;

                int newPriority = 2;
                if (len > 0 && prStr[0] >= '1' && prStr[0] <= '3') {
                    newPriority = prStr[0] - '0';
                } // –ï—Å–ª–∏ prStr –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '1', '2' –∏–ª–∏ '3',
                //—Ç–æ newPriority –ø–æ–ª—É—á–∞–µ—Ç —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ (–∫–∞–∫ —á–∏—Å–ª–æ). –ò–Ω–∞—á–µ –æ—Å—Ç–∞—ë—Ç—Å—è 2.

                editTask(id, newDesc, newDueDate, newPriority);
            }
            else if (choice == "4") {
                cout << "ID –∑–∞–¥–∞—á–∏: ";
                string s;
                getline(cin, s);

                int id = 0;
                for (int i = 0; s[i] != '\0'; i++) {
                    if (s[i] >= '0' && s[i] <= '9') {
                        id = id * 10 + (s[i] - '0');
                    }
                }

                deleteTask(id);
            }
            else if (choice == "5") {
                break;
            }
            else {
                cout << "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä\n";
            }
        }
    }
};

#endif // ORGANIZER_H